package {basePackage}.{servicePackage};

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyNoMoreInteractions;
import static org.mockito.Mockito.verifyNoInteractions;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import com.vcgdev.common.exception.ServiceException;
import com.vcgdev.common.dto.OrderTypeDTO;
import com.vcgdev.common.exception.ErrorCode;
import {basePackage}.{servicePackage}.impl.{entityName}ServiceImpl;
import {basePackage}.{dtoPackage}.{dtoName};
import {basePackage}.{mapperPackage}.{entityName}Mapper;
import {basePackage}.{repositoryPackage}.{entityName}Repository;
import {basePackage}.{domainPackage}.{entityName};

import org.mapstruct.factory.Mappers;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.Mock;

import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Page;

import java.util.Collection;
import java.util.Collections;
import java.util.stream.Stream;

@DisplayName("{entityName} Service Testing")
@ExtendWith(MockitoExtension.class)
public class {entityName}ServiceTest {

    @Mock
    private {entityName}Repository repository;

    private {entityName}Mapper mapper = Mappers.getMapper({entityName}Mapper.class);

    private {entityName}ServiceImpl service;

    private {entityName} entity;

    private {dtoName} {dtoVar};

    {classId} id;

    @BeforeEach
    public void setup() {
        // TODO init ID
        // TODO set properties
        entity = new {entityName}();
        entity.setId(id);
        // TODO set propertiers
        {dtoVar} = new {dtoName}();
        {dtoVar}.setId(id);
        service = new {entityName}ServiceImpl(repository, mapper);
    }

    private void assertDTOProperties({dtoName} dto) {
        assertEquals(id, dto.getId());
        //TODO add all propertiers from DTO
    }

    @Test
    public void add{entityName}_successTransaction() throws Exception {
        {dtoName} dto = service.add{entityName}({dtoVar});
        assertNotNull(dto);
        assertDTOProperties(dto);
    }


    @Test
    public void add{entityName}_dataIntegrityExceptionIsThrown_customExceptionShouldBeThrown () throws Exception {
        when(repository.save(any({entityName}.class)))
            .thenThrow(new DataIntegrityViolationException("Integrity violation"));
        
        ServiceException cte = assertThrows(ServiceException.class, () -> {
            service.add{entityName}({dtoVar});
        });
        assertEquals(ErrorCode.INTERNAL, cte.getCode());
        assertTrue(cte.getErrors().isEmpty());

        verify(repository).save(any({entityName}.class));
    }

    @Test
    public void add{entityName}_notManagedExceptionIsThrown_customExceptionShouldBeThrown () throws Exception {
        when(repository.save(any({entityName}.class)))
            .thenThrow(new RuntimeException("Not managed exception"));
        
        ServiceException cte = assertThrows(ServiceException.class, () -> {
            service.add{entityName}({dtoVar});
        });
        assertEquals(ErrorCode.INTERNAL, cte.getCode());
        assertTrue(cte.getErrors().isEmpty());

        verify(repository).save(any({entityName}.class));
    }

    @Test
    public void update{entityName}_notExistingEntity_customExceptionShouldBeThrown() throws Exception {
        when(repository.existsById(id))
           .thenReturn(Boolean.FALSE);

        ServiceException cte = assertThrows(ServiceException.class, () -> {
            service.update{entityName}(id, {dtoVar});
        });
        assertEquals(ErrorCode.NOT_FOUND, cte.getCode());
        assertTrue(cte.getErrors().isEmpty());

        verify(repository).existsById(id);

        verifyNoMoreInteractions(repository);
    }

    @Test
    public void update{entityName}_entityExistsInDB_successTransaction() throws Exception {
        when(repository.existsById(id))
           .thenReturn(Boolean.TRUE);

        {entityName}DTO dto = service.update{entityName}(id, {dtoVar});

        assertNotNull(dto);
        assertEquals(id, dto.getId());
        assertDTOProperties(dto);

        verify(repository).existsById(id);

        verify(repository).save(any({entityName}.class));
    }

    @Test
    public void update{entityName}_errorFetchingFromDB_customExceptionShouldBeThrown() throws Exception {
        when(repository.existsById(id))
           .thenThrow(new RuntimeException("Not managed exception"));

        ServiceException cte = assertThrows(ServiceException.class, () -> {
            service.update{entityName}(id, {dtoVar});
        });

        assertEquals(ErrorCode.INTERNAL, cte.getCode());
        assertTrue(cte.getErrors().isEmpty());

        verify(repository).existsById(id);

        verifyNoMoreInteractions(repository);
    }

    @Test
    public void findById_entityNotExists_customExceptionShouldBeThrown() throws Exception {
        when(repository.existsById(id))
           .thenReturn(Boolean.FALSE);

        ServiceException cte = assertThrows(ServiceException.class, () -> {
            service.findById(id);
        });
        assertEquals(ErrorCode.NOT_FOUND, cte.getCode());
        assertTrue(cte.getErrors().isEmpty());

        verify(repository).existsById(id);

        verifyNoMoreInteractions(repository);
    }

    @Test
    public void findById_errorFromDB_customExceptionShouldBeThrown() throws Exception {
        when(repository.existsById(id))
           .thenThrow(new RuntimeException("Not managed error"));

        ServiceException cte = assertThrows(ServiceException.class, () -> {
            service.findById(id);
        });
        assertEquals(ErrorCode.INTERNAL, cte.getCode());
        assertTrue(cte.getErrors().isEmpty());

        verify(repository).existsById(id);

        verifyNoMoreInteractions(repository);
    }

    @Test
    public void findById_entityIsInDB_DTOIsReturned() throws Exception {
        when(repository.existsById(id))
            .thenReturn(Boolean.TRUE);

        when(repository.getOne(id))
            .thenReturn(entity);

        {entityName}DTO dto = service.findById(id);

        assertNotNull(dto);
        assertDTOProperties(dto);

        verify(repository).existsById(id);

        verify(repository).getOne(id);
    }

    @Test
    public void findAll_exceptionIsThrown_customExceptionShouldBeThrown() throws Exception {

        when(repository.findAll())
            .thenThrow(new RuntimeException("Invalid transaction"));

        ServiceException cte = assertThrows(ServiceException.class, () -> {
            service.findAll();
        });

        assertEquals(ErrorCode.INTERNAL, cte.getCode());
        assertTrue(cte.getErrors().isEmpty());
    }

    @Test
    public void findAll_successTransaction_dtoListIsReturned() throws Exception {
        when(repository.findAll())
            .thenReturn(Collections.singletonList(entity));

        Collection<{entityName}DTO> dtoList = service.findAll();
        assertEquals(1, dtoList.size());
    }

    @Test
    public void getPaginatedResult_invalidParametersProvided_customExceptionIsThrown () throws Exception {        
        ServiceException cte = assertThrows(ServiceException.class, () -> {
            Page<{entityName}DTO> dtoPage = service.getPaginatedResult(0, 10, "invalidColumn", OrderTypeDTO.DESC);
        });
        

        assertEquals(ErrorCode.BAD_REQUEST, cte.getCode());
        assertTrue(cte.getErrors().isEmpty());
        verifyNoInteractions(repository);
    }

    @Test
    public void getPaginatedResult_exceptionIsCatch_customExceptionIsThrown () throws Exception {        
        
        when(repository.findAll(any(PageRequest.class)))
            .thenThrow(new RuntimeException("Invalid transaction"));

        ServiceException cte = assertThrows(ServiceException.class, () -> {
            Page<{entityName}DTO> dtoPage = service.getPaginatedResult(0, 10, "id", OrderTypeDTO.DESC);
        });
        

        assertEquals(ErrorCode.INTERNAL, cte.getCode());
        assertTrue(cte.getErrors().isEmpty());
    }

    @ParameterizedTest(name = "#{index} Run test with Page= {0} - Size = {1} - Column = {2} - Orded = {3}")
    @MethodSource("validPageParameters")
    void getPaginatedResult_validParameters_pageIsReturned(Integer page, Integer size, String column, OrderTypeDTO order) throws Exception {
        when(repository.findAll(any(PageRequest.class)))
            .thenReturn(new PageImpl<>(Collections.singletonList(entity), PageRequest.of(page, size), size));
        Page<{entityName}DTO> dtoPage = service.getPaginatedResult(page, size, column, order);

        assertNotNull(dtoPage);
        assertEquals(1, dtoPage.getContent().size());
    }

    static Stream<Arguments> validPageParameters() {
        return Stream.of(
            Arguments.of(0, 10, null,  null),
            Arguments.of(1, 10, "id", OrderTypeDTO.ASC),
            Arguments.of(1, 10, "id", OrderTypeDTO.DESC),
            Arguments.of(1, 10, "is", null)
        );
    }

}
