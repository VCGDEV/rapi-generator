package {basePackage}.{resourcePackage};

import {basePackage}.{dtoPackage}.{dtoName};
import {basePackage}.{servicePackage}.{entityName}Service;
import {basePackage}.{exceptionPackage}.{Exception};

import java.util.Collection;
import javax.servlet.http.HttpServletResponse;

import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.validation.annotation.Validated;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@RestController()
@RequestMapping("{mapping}")
@Api(produces = "", tags = {}) // TODO add api tags
public class {entityName}Controller {
    
    private {entityName}Service {entityVar}Service;

    public {entityName}Controller({entityName}Service {entityVar}Service) {
       this.{entityVar}Service = {entityVar}Service;
    }

    @PostMapping()
    // TODO update swagger annotations
    @ApiResponses(value = {
        @ApiResponse(code = HttpServletResponse.SC_CREATED, message = "Created", response = {dtoName}.class),
        @ApiResponse(code = HttpServletResponse.SC_BAD_REQUEST, message = "Bad request"),
        @ApiResponse(code = HttpServletResponse.SC_INTERNAL_SERVER_ERROR, message = "Internal error"),
        @ApiResponse(code = HttpServletResponse.SC_FORBIDDEN, message = "Acces denied"),
        @ApiResponse(code = HttpServletResponse.SC_UNAUTHORIZED, message = "Not authorized")
    })
    @PreAuthorize(value = "isAuthenticated()") // TODO update if required
    public HttpEntity<{dtoName}> add{entityName}(
        @RequestBody @Validated {dtoName} {dtoVar}
    ) throws {Exception}{
        {dtoName} dto = this.{entityVar}Service.add{entityName}({dtoVar});
        return new ResponseEntity<>(dto,HttpStatus.CREATED);
    }

    @PutMapping(value="{id}")
    // TODO add swagger annotations
    @ApiResponses(value = {
        @ApiResponse(code = HttpServletResponse.SC_OK, message = "Success", response = {dtoName}.class),
        @ApiResponse(code = HttpServletResponse.SC_BAD_REQUEST, message = "Bad request"),
        @ApiResponse(code = HttpServletResponse.SC_INTERNAL_SERVER_ERROR, message = "Internal error"),
        @ApiResponse(code = HttpServletResponse.SC_FORBIDDEN, message = "Acces denied"),
        @ApiResponse(code = HttpServletResponse.SC_UNAUTHORIZED, message = "Not authorized")
    })
    @PreAuthorize(value = "isAuthenticated()") // TODO update if required
    public HttpEntity<{dtoName}> update{entityName}(
        @RequestBody @Validated {dtoName} {dtoVar},
        @PathVariable {classId} id
        ) throws {Exception} {    
        {dtoVar}.setId(id);
        {dtoName} dto = this.{entityVar}Service.update{entityName}({dtoVar});        
        return new ResponseEntity<>(dto, HttpStatus.OK);
    }

    @GetMapping(value="{id}")
    // TODO update swagger annotations
    @ApiResponses(value = {
        @ApiResponse(code = HttpServletResponse.SC_OK, message = "Success", response = {dtoName}.class),
        @ApiResponse(code = HttpServletResponse.SC_BAD_REQUEST, message = "Bad request"),
        @ApiResponse(code = HttpServletResponse.SC_INTERNAL_SERVER_ERROR, message = "Internal error"),
        @ApiResponse(code = HttpServletResponse.SC_FORBIDDEN, message = "Acces denied"),
        @ApiResponse(code = HttpServletResponse.SC_UNAUTHORIZED, message = "Not authorized")
    })
    @ApiOperation(value = "", httpMethod = "GET", response = {dtoName}.class)
    @PreAuthorize(value = "isAuthenticated()") // TODO update if required
    public HttpEntity<{dtoName}> findById(@PathVariable {classId} id) throws {Exception}{        
        return new ResponseEntity<>(this.{entityVar}Service.findById(id), HttpStatus.OK);
    }

    @GetMapping()
    // TODO update swagger annotations
    @ApiResponses(value = {
        @ApiResponse(code = HttpServletResponse.SC_OK, message = "Success", response = {dtoName}.class),
        @ApiResponse(code = HttpServletResponse.SC_BAD_REQUEST, message = "Bad request"),
        @ApiResponse(code = HttpServletResponse.SC_INTERNAL_SERVER_ERROR, message = "Internal error"),
        @ApiResponse(code = HttpServletResponse.SC_FORBIDDEN, message = "Acces denied"),
        @ApiResponse(code = HttpServletResponse.SC_UNAUTHORIZED, message = "Not authorized")
    })
    @PreAuthorize(value = "isAuthenticated()") // TODO update if required
    public HttpEntity<Collection<{dtoName}>> findAll() throws {Exception}{        
        Collection<{dtoName}> dtoList = this.{entityVar}Service.findAll();
        return new ResponseEntity<>(dtoList, HttpStatus.OK);
    }

    @GetMapping(value="paginatedResult")
    // TODO update swagger annotations
    @ApiResponses(value = {
        @ApiResponse(code = HttpServletResponse.SC_OK, message = "Success", response = {dtoName}.class),
        @ApiResponse(code = HttpServletResponse.SC_BAD_REQUEST, message = "Bad request"),
        @ApiResponse(code = HttpServletResponse.SC_INTERNAL_SERVER_ERROR, message = "Internal error"),
        @ApiResponse(code = HttpServletResponse.SC_FORBIDDEN, message = "Acces denied"),
        @ApiResponse(code = HttpServletResponse.SC_UNAUTHORIZED, message = "Not authorized")
    })
    @PreAuthorize(value = "isAuthenticated()") // TODO update if required
    public HttpEntity<Page<{dtoName}>> getPaginatedResult(
            @RequestParam(required = false,defaultValue = "0") Integer page,
            @RequestParam(required = false,defaultValue = "20") Integer size,
            @RequestParam(required = false) String columnToOrder,
            @RequestParam(required = false) String orderType
        ) throws {Exception} {
        Page<{dtoName}> paginatedResult = this.{entityVar}Service.getPaginatedResult(page,size,columnToOrder,orderType);
        return new ResponseEntity<>(paginatedResult, HttpStatus.OK);
    }
}
