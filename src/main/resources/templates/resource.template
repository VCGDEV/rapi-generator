package {basePackage}.{resourcePackage};

import {basePackage}.{dtoPackage}.{dtoName};
import {basePackage}.{servicePackage}.{entityName}Service;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpEntity;
import org.springframework.http.ResponseEntity;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.Collection;
import {basePackage}.{exceptionPackage}.{Exception};
import org.springframework.web.bind.annotation.*;
import org.springframework.validation.annotation.Validated;

//TODO add swagger annotations
@RestController()
@RequestMapping("{mapping}")
public class {entityName}Controller {
    
    private {entityName}Service {entityVar}Service;

    public {entityName}Controller({entityName}Service {entityVar}Service) {
       this.{entityVar}Service = {entityVar}Service;
    }

    @PostMapping()
    // TODO add swagger annotations
    // TODO add security annotations
    public HttpEntity<{dtoName}> add{entityName}(
        @RequestBody @Validated {dtoName} {dtoVar}
    ) throws {Exception}{
        {dtoName} dto = this.{entityVar}Service.add{entityName}({dtoVar});
        return new ResponseEntity<>(dto,HttpStatus.OK);
    }

    @PutMapping(value="{id}")
    // TODO add swagger annotations
    // TODO add security annotations
    public HttpEntity<{dtoName}> update{entityName}(
        @RequestBody @Validated {dtoName} {dtoVar},
        @PathVariable {classId} id
        ) throws {Exception} {    
        {dtoVar}.setId(id);
        {dtoName} dto = this.{entityVar}Service.update{entityName}({dtoVar});        
        return new ResponseEntity<>(dto, HttpStatus.OK);
    }

    @GetMapping(value="{id}")
    // TODO add swagger annotations
    // TODO add security annotations
    public HttpEntity<{dtoName}> findById(@PathVariable {classId} id) throws {Exception}{        
        return new ResponseEntity<>(this.{entityVar}Service.findById(id), HttpStatus.OK);
    }

    @GetMapping()
    // TODO add swagger annotations
    // TODO add security annotations
    public HttpEntity<Collection<{dtoName}>> findAll() throws {Exception}{        
        Collection<{dtoName}> dtoList = this.{entityVar}Service.findAll();
        return new ResponseEntity<>(dtoList, HttpStatus.OK);
    }

    @GetMapping(value="paginatedResult")
    // TODO add swagger annotations
    // TODO add security annotations
    public HttpEntity<Page<{dtoName}>> getPaginatedResult(
            @RequestParam(required = false,defaultValue = "0") Integer page,
            @RequestParam(required = false,defaultValue = "20") Integer size,
            @RequestParam(required = false) String columnToOrder,
            @RequestParam(required = false) String orderType
        ) throws {Exception} {
        Page<{dtoName}> paginatedResult = this.{entityVar}Service.getPaginatedResult(page,size,columnToOrder,orderType);
        return new ResponseEntity<>(paginatedResult, HttpStatus.OK);
    }
}
