package {basePackage}.{resourcePackage};

import {basePackage}.{dtoPackage}.{dtoName};
import {basePackage}.{servicePackage}.{entityName}Service;
import com.vcgdev.common.dto.OrderTypeDTO;
import com.vcgdev.common.exception.ErrorCode;
import com.vcgdev.common.exception.ServiceException;
import com.vcgdev.common.swagger.SwaggerConstants;

import java.util.Collection;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.validation.annotation.Validated;

import lombok.extern.slf4j.Slf4j;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@RestController()
@RequestMapping("{mapping}")
@Api(produces = SwaggerConstants.APPLICATION_JSON_RESPONSE, tags = {}) // TODO add api tags
@Slf4j
@Validated
public class {entityName}Controller {
    
    private {entityName}Service {entityVar}Service;

    public {entityName}Controller({entityName}Service {entityVar}Service) {
       this.{entityVar}Service = {entityVar}Service;
    }

    @ApiOperation(value = "Create new {entityName}", httpMethod = SwaggerConstants.HTTP_POST, response = {dtoName}.class )
    @ApiResponses(value = {
        @ApiResponse(code = HttpServletResponse.SC_CREATED, message = SwaggerConstants.CREATED_MESSAGE, response = {dtoName}.class),
        @ApiResponse(code = HttpServletResponse.SC_BAD_REQUEST, message = SwaggerConstants.BAD_REQUEST_MESSAGE),
        @ApiResponse(code = HttpServletResponse.SC_INTERNAL_SERVER_ERROR, message = SwaggerConstants.INTERNAL_SERVER_ERROR_MESSAGE),
        @ApiResponse(code = HttpServletResponse.SC_FORBIDDEN, message = SwaggerConstants.FORBIDDEN_MESSAGE),
        @ApiResponse(code = HttpServletResponse.SC_UNAUTHORIZED, message = SwaggerConstants.UNAUTHORIZED_MESSAGE)
    })
    @PostMapping()
    @PreAuthorize(value = "isAuthenticated()") // TODO update if required
    public ResponseEntity<{dtoName}> add{entityName}(
        @RequestBody @Valid {dtoName} {dtoVar}
    ) throws ServiceException {
        try {         
            {dtoName} dto = this.{entityVar}Service.add{entityName}({dtoVar});
            return new ResponseEntity<>(dto,HttpStatus.CREATED);    
        } catch (ServiceException se) {
            throw se;
        } catch (Exception e) {
            log.error("Unable to save request", e);
            throw new ServiceException(ErrorCode.INTERNAL);
        }
    }

    
    @ApiOperation(value = "Update {entityName}", httpMethod = SwaggerConstants.HTTP_PUT, response = {dtoName}.class )
    @ApiResponses(value = {
        @ApiResponse(code = HttpServletResponse.SC_OK, message = SwaggerConstants.OK_MESSAGE, response = {dtoName}.class),
        @ApiResponse(code = HttpServletResponse.SC_BAD_REQUEST, message = SwaggerConstants.BAD_REQUEST_MESSAGE),
        @ApiResponse(code = HttpServletResponse.SC_INTERNAL_SERVER_ERROR, message = SwaggerConstants.INTERNAL_SERVER_ERROR_MESSAGE),
        @ApiResponse(code = HttpServletResponse.SC_FORBIDDEN, message = SwaggerConstants.FORBIDDEN_MESSAGE),
        @ApiResponse(code = HttpServletResponse.SC_UNAUTHORIZED, message = SwaggerConstants.UNAUTHORIZED_MESSAGE)
    })
    @PutMapping(value="{id}")
    @PreAuthorize(value = "isAuthenticated()") // TODO update if required
    public ResponseEntity<{dtoName}> update{entityName}(
        @RequestBody @Valid {dtoName} {dtoVar},
        @PathVariable {classId} id
        ) throws ServiceException {
        try {
            {dtoName} dto = this.{entityVar}Service.update{entityName}(id, {dtoVar});        
            return new ResponseEntity<>(dto, HttpStatus.OK);
        } catch (ServiceException se) {
            throw se;
        } catch (Exception e) {
            log.error("Unable to update request", e);
            throw new ServiceException(ErrorCode.INTERNAL);
        }        
    }

    
    @ApiOperation(value = "Fetch {entityName} by Id", httpMethod = SwaggerConstants.HTTP_GET, response = {dtoName}.class)
    @ApiResponses(value = {
        @ApiResponse(code = HttpServletResponse.SC_OK, message = SwaggerConstants.OK_MESSAGE, response = {dtoName}.class),
        @ApiResponse(code = HttpServletResponse.SC_BAD_REQUEST, message = SwaggerConstants.BAD_REQUEST_MESSAGE),
        @ApiResponse(code = HttpServletResponse.SC_INTERNAL_SERVER_ERROR, message = SwaggerConstants.INTERNAL_SERVER_ERROR_MESSAGE),
        @ApiResponse(code = HttpServletResponse.SC_FORBIDDEN, message = SwaggerConstants.FORBIDDEN_MESSAGE),
        @ApiResponse(code = HttpServletResponse.SC_UNAUTHORIZED, message = SwaggerConstants.UNAUTHORIZED_MESSAGE)
    })    
    @GetMapping(value="{id}")
    @PreAuthorize(value = "isAuthenticated()") // TODO update if required
    public ResponseEntity<{dtoName}> findById(@PathVariable {classId} id) throws ServiceException {        
        return new ResponseEntity<>(this.{entityVar}Service.findById(id), HttpStatus.OK);
    }

    @ApiOperation(value = "Delete {entityName} by Id", httpMethod = SwaggerConstants.HTTP_DELETE)
    @ApiResponses(value = {
        @ApiResponse(code = HttpServletResponse.SC_OK, message = SwaggerConstants.OK_MESSAGE),
        @ApiResponse(code = HttpServletResponse.SC_BAD_REQUEST, message = SwaggerConstants.BAD_REQUEST_MESSAGE),
        @ApiResponse(code = HttpServletResponse.SC_INTERNAL_SERVER_ERROR, message = SwaggerConstants.INTERNAL_SERVER_ERROR_MESSAGE),
        @ApiResponse(code = HttpServletResponse.SC_FORBIDDEN, message = SwaggerConstants.FORBIDDEN_MESSAGE),
        @ApiResponse(code = HttpServletResponse.SC_UNAUTHORIZED, message = SwaggerConstants.UNAUTHORIZED_MESSAGE)
    })    
    @DeleteMapping(value="{id}")
    @PreAuthorize(value = "isAuthenticated()") // TODO update if required    
    public ResponseEntity<Void> deleteById(@PathVariable {classId} id) throws ServiceException {
    	try {
    		this.{entityVar}Service.deleteById(id);
    		return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    	} catch (ServiceException e) {
			throw e;
		} catch (Exception e) {
			log.error("Unable to remove by id: {}", id, e);
			throw new ServiceException(ErrorCode.INTERNAL);
		}
    }

    
    @ApiOperation(value = "Fetch list of {entityName}", httpMethod = SwaggerConstants.HTTP_GET, response = Collection.class)
    @ApiResponses(value = {
        @ApiResponse(code = HttpServletResponse.SC_OK, message = SwaggerConstants.OK_MESSAGE, response = Collection.class),
        @ApiResponse(code = HttpServletResponse.SC_BAD_REQUEST, message = SwaggerConstants.BAD_REQUEST_MESSAGE),
        @ApiResponse(code = HttpServletResponse.SC_INTERNAL_SERVER_ERROR, message = SwaggerConstants.INTERNAL_SERVER_ERROR_MESSAGE),
        @ApiResponse(code = HttpServletResponse.SC_FORBIDDEN, message = SwaggerConstants.FORBIDDEN_MESSAGE),
        @ApiResponse(code = HttpServletResponse.SC_UNAUTHORIZED, message = SwaggerConstants.UNAUTHORIZED_MESSAGE)
    })
    @GetMapping()
    @PreAuthorize(value = "isAuthenticated()") // TODO update if required
    public ResponseEntity<Collection<{dtoName}>> findAll() throws ServiceException {        
        Collection<{dtoName}> dtoList = this.{entityVar}Service.findAll();
        return new ResponseEntity<>(dtoList, HttpStatus.OK);
    }

    
    @ApiOperation(value = "Fetch paginated result of {entityName}", httpMethod = SwaggerConstants.HTTP_GET, response = Page.class)
    @ApiResponses(value = {
        @ApiResponse(code = HttpServletResponse.SC_OK, message = SwaggerConstants.OK_MESSAGE, response = Page.class),
        @ApiResponse(code = HttpServletResponse.SC_BAD_REQUEST, message = SwaggerConstants.BAD_REQUEST_MESSAGE),
        @ApiResponse(code = HttpServletResponse.SC_INTERNAL_SERVER_ERROR, message = SwaggerConstants.INTERNAL_SERVER_ERROR_MESSAGE),
        @ApiResponse(code = HttpServletResponse.SC_FORBIDDEN, message = SwaggerConstants.FORBIDDEN_MESSAGE),
        @ApiResponse(code = HttpServletResponse.SC_UNAUTHORIZED, message = SwaggerConstants.UNAUTHORIZED_MESSAGE)
    })
    @GetMapping(value="pages")
    @PreAuthorize(value = "isAuthenticated()") // TODO update if required
    public ResponseEntity<Page<{dtoName}>> getPaginatedResult(
            @RequestParam(required = false,defaultValue = "0") Integer page,
            @RequestParam(required = false,defaultValue = "20") Integer size,
            @RequestParam(required = false) String columnToOrder,
            @RequestParam(required = false) OrderTypeDTO orderType
        ) throws ServiceException {
        Page<{dtoName}> paginatedResult = this.{entityVar}Service.getPaginatedResult(page,size,columnToOrder,orderType);
        return new ResponseEntity<>(paginatedResult, HttpStatus.OK);
    }
}
